<?php

/*
 * Spot Bundle
 * This file is part of the BardisCMS.
 *
 * (c) George Bardis <george@bardis.info>
 *
 */

namespace BardisCMS\SpotBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Application\Sonata\MediaBundle\Entity\Media;
use Application\Sonata\UserBundle\Entity\User;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints as DoctrineAssert;
use BardisCMS\ContentBlockBundle\Entity\ContentBlock;
use BardisCMS\SpotBundle\Entity\SpotDestinationFilter;
use BardisCMS\SpotBundle\Entity\SpotFilter;


/**
 * BardisCMS\SpotBundle\Entity\Spot
 *
 * @ORM\Table(name="spots")
 * @DoctrineAssert\UniqueEntity(fields="alias", message="Alias must be unique")
 * @ORM\Entity(repositoryClass="BardisCMS\SpotBundle\Repository\SpotRepository")
 */
class Spot
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="date")
     */ 
    protected $date;

    /**
     * @ORM\Column(type="string", length=255)
     */ 
    protected $title;

    /**
     * @ORM\ManyToOne(targetEntity="Application\Sonata\UserBundle\Entity\User", cascade={"persist"})
     * @ORM\JoinColumn(name="author", onDelete="SET NULL")
     */ 
    protected $author;

    /**
     * @ORM\Column(type="string", length=255, nullable=true, unique = true)
     */  
    protected $alias = null;

    /**
     * @ORM\Column(type="integer")
     */ 
    protected $pageOrder = 99;

    /**
     * @ORM\Column(type="integer")
     */ 
    protected $spotOrder = 99;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */ 
    protected $showPageTitle = 1;

    /**
     * @ORM\Column(type="integer")
     */   
    protected $publishState = 0;	

    /**
     * @ORM\Column(type="integer")
     */   
    protected $featuredSpot = 0;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $pageclass = null;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $mapLatitude = null;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $mapLongitude = null;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */ 
    protected $description = null;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $keywords = null;

    /**
     * @ORM\Column(type="text", nullable=true)
     */ 
    protected $introtext = null;

    /**
     * @ORM\OneToOne(targetEntity="Application\Sonata\MediaBundle\Entity\Media", cascade={"persist"})
     * @ORM\JoinColumn(name="introimage", onDelete="SET NULL")
     */ 
    protected $introimage;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $introclass = null;

    /**
    * @ORM\ManyToMany(targetEntity="BardisCMS\SpotBundle\Entity\SpotDestinationFilter", inversedBy="spots", cascade={"persist"})
    * @ORM\JoinTable(name="spots_destinationfilters")
    */
    protected $spotDestinationFilters;

    /**
    * @ORM\ManyToMany(targetEntity="BardisCMS\SpotBundle\Entity\SpotFilter", inversedBy="spots", cascade={"persist"})
    * @ORM\JoinTable(name="spots_spotfilters")
    */
    protected $spotFilters;

    /**
    * @ORM\OneToOne(targetEntity="BardisCMS\SpotBundle\Entity\SpotAttribute", cascade={"persist"})
    * @ORM\JoinColumn(name="spotattributes", onDelete="SET NULL")
    */ 
    protected $spotAttributes;
    
    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $pagetype = null;

    /**
     * @ORM\Column(type="text", nullable=true)
     */ 
    protected $summary = null;
   
    /**
     * @ORM\ManyToMany(targetEntity="BardisCMS\ContentBlockBundle\Entity\ContentBlock", inversedBy="spot_maincontents", cascade={"persist"})
     * @ORM\JoinTable(name="spots_maincontent_blocks")
     **/
    protected $maincontentblocks;

   
    /**
     * @ORM\ManyToMany(targetEntity="BardisCMS\ContentBlockBundle\Entity\ContentBlock", inversedBy="spot_secondarycontents", cascade={"persist"})
     * @ORM\JoinTable(name="spots_secondarycontent_blocks")
     **/
    protected $secondarycontentblocks;

   
    /**
     * @ORM\ManyToMany(targetEntity="BardisCMS\ContentBlockBundle\Entity\ContentBlock", inversedBy="spot_bannercontents", cascade={"persist"})
     * @ORM\JoinTable(name="spots_bannercontent_blocks")
     **/
    protected $bannercontentblocks;


    /**
     * @ORM\ManyToMany(targetEntity="BardisCMS\ContentBlockBundle\Entity\ContentBlock", inversedBy="spot_modalcontents", cascade={"persist"})
     * @ORM\JoinTable(name="spots_modalcontent_blocks")
     **/
    protected $modalcontentblocks;
    

    public function __construct() {
        $this->modalcontentblocks 		= new \Doctrine\Common\Collections\ArrayCollection();
        $this->maincontentblocks 		= new \Doctrine\Common\Collections\ArrayCollection();
        $this->secondarycontentblocks 	= new \Doctrine\Common\Collections\ArrayCollection();
        $this->bannercontentblocks		= new \Doctrine\Common\Collections\ArrayCollection();
		$this->date						= new \DateTime();
    }

	
    /**
     * toString Title
     *
     * @return string 
     */
    public function __toString()
    {
		if($this->getTitle()){
			return (string)$this->getTitle();			
		}
		else{
			return (string)'New Spot Page';
		}
    }
    
    /**
    * toString PublishState
    *
    * @return string 
    */
    public function getPublishStateAsString()
    {
        switch($this->getPublishState()){
            case(0): return "Unpublished";
            case(1): return "Published";
            case(2): return "Preview";
        }
    }
    
    /**
    * toString FeaturedSpot
    *
    * @return string 
    */
    public function getFeaturedSpotAsString()
    {
        switch($this->getFeaturedSpot()){
            case(0): return "No";
            case(1): return "Yes";
        }
    }
    
    /**
    * toString Pagetype
    *
    * @return string 
    */
    public function getPagetypeAsString()
    {
        switch($this->getPagetype()){
            case('spot_article'):		return "Spot Page";
            case('spot_filtered_list'):	return "Spot Filter Results";
            case('spot_home'):			return "Spot Home";
            default:					return $this->getPagetype(); 
        }
    }

}
